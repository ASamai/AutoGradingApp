PDF Contents:
COMP2603 Assignment 1

Mark Scheme: 100 Marks

Passenger Class: 16 marks 
Class Design Marks Program Marks
Passenger 16 Compiles 5
LuggageSlip 14 Runs 
(LuggageManagementSystem)
10
LuggageManifest 20 Passes JUnit Tests 14
Flight 16 Has clean code 5
Total 66 Total 34
Attribute Type MARKS CRITERIA
passportNumber String 1 Private, instance variable, declared only.
flightNo String 1 Private, instance variable, declared only.
firstName String 1 Private, instance variable, declared only.
lastName String 1 Private, instance variable, declared only.
numLuggage int 1 Private, instance variable, declared only.
cabinClass char 1 Private, instance variable, declared only.
Method Signature Return 
Type MARKS CRITERIA
Passenger (String 
passportNumber, String 
firstName, String lastName, 
String flightNo)

5
Constructor. 

- Uses the 4 input parameters to set the 
state.  (2 marks)

- Sets the numLuggage variable randomly  
(2 marks) 

- -Sets the cabinClass variable randomly 
(1 mark)
assignRandomCabinClass( ) void 2 Sets the cabinClass variable to a random 
cabin class value :  ‘F', 'B', 'P', 'E'
COMP2603 Assignment 1	Marking Scheme	 	 	 	 	 	 	 	          Page  of 1 4
Format for the toString( ) output for a Passenger, Joe Bean, with passport number TA890789:

PP NO. TA890789 NAME: J.BEAN NUMLUGGAGE: 3 CLASS: E

LuggageSlip Class: 14 marks 
Sample luggageSlipID values for a Passenger, Joe Bean, with three pieces of luggage on flight 
BW600:

BW600_Bean_1  
BW600_Bean_2  
BW600_Bean_3  
Format for the toString( ) output for a LuggageSlip for Joe Bean

BW600_Bean_1  PP NO. TA890789 NAME: J.BEAN NUMLUGGAGE: 3 CLASS: E $105

BW600_Bean_2  PP NO. TA890789 NAME: J.BEAN NUMLUGGAGE: 3 CLASS: E $105

BW600_Bean_3  PP NO. TA890789 NAME: J.BEAN NUMLUGGAGE: 3 CLASS: E $105

The additional token at the end ($105) is the label (if set).

LuggageManifest Class: 20 marks 
toString( ) String 3
Returns a String representation of a 
Passenger object. See format below

Method Signature Return 
Type MARKS CRITERIA
Attribute Type MARKS Purpose
owner Passenger 1 The Passenger who owns/checks in the luggage.
luggageSlipIDCounter int 1 A class variable that starts at 1 and increments by 
1 for each new LuggageSlip object created.
luggageSlipID String 1
A unique identifier for the LuggageSlip, produced 
using Passenger’s flight number, last name and 
the luggageSlipIDCounter. Example below
label String 1 A string variable for recording any additional 
details on the luggage slip.
Method Signature Return Type MARKS Purpose
LuggageSlip (Passenger p,  
Flight f) 3
Constructor. Initialises all state using the 
input parameters, and sets the label to an 
empty String.
LuggageSlip (Passenger p,  
Flight f, String label) 3 Overloaded constructor. Initialises all state 
using the input parameters (including label).
hasOwner (String 
passportNumber) boolean 2
Return true if the owner of the LuggageSlip 
has the supplied passportNumber, false 
otherwise.
toString( ) String 2 Returns a String representation of the 
LuggageSlip object. See format below.
COMP2603 Assignment 1	Marking Scheme	 	 	 	 	 	 	 	          Page  of 2 4
*Sample output for the addLuggage(..) method for Passenger 1 - 2 pieces of luggage, 1 excess

PP NO. TA890789 NAME: J.BEAN NUMLUGGAGE: 2 CLASS: P

Pieces Added: (2). Excess Cost: $35

*Sample output for the addLuggage(..) method for Passenger 2 - 0 pieces of luggage

PP NO. TA890789 NAME: J.BEAN NUMLUGGAGE: 0 CLASS: P

No Luggage to add.

*Sample output for the addLuggage(..) method for Passenger 3 - 1 piece of luggage, 0 excess

PP NO. TA890789 NAME: J.BEAN NUMLUGGAGE: 1 CLASS: B

Pieces Added: (1) Excess Cost: $0

Sample toString( ) output for the LuggageManifest :

LUGGAGE MANIFEST: 

Attribute Type MARKS CRITERIA
slips ArrayList<LuggageSlip> 2
Private, instance variable, declared 
outside constructor, initialised in 
constructor
Method Signature Return Type MARKS CRITERIA
LuggageManifest ( ) 1 Constructor. 

- Initialises the slips collection.
addLuggage(Passenger 
p, Flight f) String 6
- Creates one or more new 
LuggageSlip objects 

- Adds the LuggageSlip object(s) to the 
slips collection based on the number of 
pieces of luggage that a Passenger 
has. 

- Checks the number of allowed pieces 
based on the Passenger’s cabin class 
and 

- Calculates the cost of excess 
luggage. 

- Adds the excess luggage cost as a 
label on all luggage slips for the 
Passenger. 

The method returns the output 
indicated below*. 
getExcessLuggageCost( 
int numPieces, int 
numAllowedPieces)
double 3
Calculates and returns the total cost of 
adding excess luggage based on the 
number of allowed pieces. Every 
excess piece of luggage costs $35.00.
getExcessLuggageCost
ByPassenger(String 
passportNumber)
String 5
Returns the total cost of excess 
luggage (if any) on the manifest for a 
Passenger with a given passport 
number or “No Cost” otherwise.
toString( ) String 3
Returns a String representation of the 
aggregated state of a LuggageManifest 
by traversing and returning the String 
representation of each LuggageSlip (if 
present). 
COMP2603 Assignment 1	Marking Scheme	 	 	 	 	 	 	 	          Page  of 3 4
BW600_Bean_1  PP NO. TA890789 NAME: J.BEAN NUMLUGGAGE: 2 CLASS: F 

BW600_Bean_2  PP NO. TA890789 NAME: J.BEAN NUMLUGGAGE: 2 CLASS: F 

BW600_Deer_3  PP NO. BA321963 NAME: L.DEER NUMLUGGAGE: 2 CLASS: P $35

BW600_Deer_4  PP NO. BA321963 NAME: L.DEER NUMLUGGAGE: 2 CLASS: P $35

Flight Class: 16 marks 
Attribute Type MARKS CRITERIA
flightNo String 1 Private, instance variable, declared only.
destination String 1 Private, instance variable, declared only.
origin String 1 Private, instance variable, declared only.
flightDate LocalDateTime 1 Private, instance variable, declared only.
manifest LuggageManifest 1 Private, instance variable, declared only.
Method Signature Return Type MARKS CRITERIA
Flight (String flightNo, String 
destination, String origin, 
LocalDateTime flightDate)
2
Constructor. Initialises the state variables, 
with the supplied parameters if applicable, 
and creates a new LuggageManifest object
checkInLuggage(Passenger p) String 5
Validates whether a Passenger can check 
in luggage for the flight (same flight number 
as the Passenger’s).If this is true, the 
method adds the Passenger’s luggage to 
the flight using the addLuggage(..) method 
and returns the String outcome. If the 
Passenger’s flight number does not match 
the Flight, then the message “Invalid flight” 
is returned.

printLuggageManifest( ) String 1 Returns a String representation of the 
manifest
getAllowedLuggage( char 
cabinClass) int 2
A class method that returns the number of 
allowed pieces of luggage for a given cabin 
class, after which a cost is incurred.

‘F’: 3 pieces

‘B': 2 pieces

'P': 1 piece

‘E': 0 pieces

toString( ) String 1 Returns a String representation of the 
Flight.
COMP2603 Assignment 1	Marking Scheme	 	 	 	 	 	 	 	          Page  of 4 4


Java Contents:
import java.time.LocalDateTime;

public class Flight {
    //Declarations
    private String flightNo;
    private String destination;
    private String origin;
    private LocalDateTime flightDate;
    private LuggageManifest manifest;

    //constructor
        public Flight(String flightNo, String destination, String origin, LocalDateTime flightDate) {
            this.flightNo = flightNo;
            this.destination = destination;
            this.origin = origin;
            this.flightDate = flightDate;
            this.manifest = new LuggageManifest();
        }

    //accessors
        public String getFlightNo() {
            return this.flightNo;
        }

        public String getDestination() {
            return this.destination;
        }

        public String getOrigin() {
            return this.origin;
        }

        public LocalDateTime getFlightDate() {
            return this.flightDate;
        }

        public LuggageManifest getManifest() {
            return this.manifest;
        }

    //methods
        public String checkInLuggage(Passenger p) {
            int i = p.getNumLuggage();
            Flight f = new Flight(this.flightNo, this.destination, this.origin, this.flightDate);
            String s;
                if (p.getFlightNo().equals(this.flightNo)) {
                    if (i > 0) {
                        
                            while (i != 0) {
                            this.manifest.addLuggage(p, f);
                            i--;
                            }
                        s = "Your " + p.getNumLuggage() + " luggages have been checked in for flight " + this.getFlightNo();
                        } else {
                    
                        s = "You have no luggages for flight " + this.getFlightNo();
                        }
                    } 
                    else {
                        
                        s = "Invalid Flight";
                }
            return s;
        }   

        public String printLuggageManifest() {
            return this.manifest.toString();
        }

        public int getAllowedLuggage(char cabinClass) {
            int i = 0;
                switch(cabinClass) {
                    case '1':
                        cabinClass = 'F';
                        i = 3;
                        break;

                    case '2':
                        cabinClass = 'B';
                        i = 2;
                        break;

                    case '3':
                        cabinClass = 'P';
                        i = 1;
                        break;

                    case '4':
                        cabinClass = 'E';
                        i = 0;
                        break;
                }
            return i;
        }

        public String toString() {
            
            return this.getFlightNo() + "  DESTINATION: " + this.getDestination() + " ORIGIN: " + this.getOrigin() + " " + 
            this.getFlightDate();
        }
        
}


import java.time.LocalDateTime;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Arrays;
import java.io.IOException;
import java.util.List;
import java.nio.file.Files;
import java.nio.file.Paths;
public class LuggageManagementSystem{
    public static void main(String [] args){
        //declarations
            LocalDateTime time = LocalDateTime.now();
            String flightNo = "";
            String destination = "";
            String origin = "";
            String passportNo = "";
            String firstName = "";
            String lastName = "";
            String flightFile = "FlightList.txt";
            String passengerFile = "PassengerList.txt";
            LuggageManifest manifest = new LuggageManifest();

            try {
                List<String> flightLines = Files.readAllLines(Paths.get(flightFile));
                List<String> passengerLines = Files.readAllLines(Paths.get(passengerFile));
    
                //**read flight data**
                    for (String flightData : flightLines) {
                        String[] fTemp = flightData.split(" ");
                        flightNo = fTemp[0];
                        destination = fTemp[1];
                        origin = fTemp[2];
                        Flight f = new Flight(flightNo, destination, origin, time);
        
                        //**read passenger data**
                            for (String passengerData : passengerLines) {
                                String[] pTemp = passengerData.split(" ");
                                passportNo = pTemp[0];
                                firstName = pTemp[1];
                                lastName = pTemp[2];
                                
                                //**perform program**
                                Passenger passenger = new Passenger(passportNo, firstName, lastName, flightNo);
                                
                                System.out.println(passenger);
                                System.out.println(f.checkInLuggage(passenger));
                                System.out.println(f.printLuggageManifest());
                                System.out.println(manifest.addLuggage(passenger,f));
                            }
                            
                    }
                  
                } catch (IOException e) {
                    //**error checking**
                    System.out.println("File not found: " + e.getMessage());
            }
                
    }
}
import java.util.ArrayList;

public class LuggageManifest {
    // Declaration
    private ArrayList<LuggageSlip> slips;
    private Flight f;
    
    // constructor
        public LuggageManifest() {
        slips = new ArrayList<LuggageSlip>();
        }

    // accessors
        public ArrayList<LuggageSlip> getSlips() {
        return slips;
        }

    // method
        public String addLuggage(Passenger p, Flight f) {
            String s = "";
                if (p.getFlightNo().equals(f.getFlightNo())) {
                    String label;
                    label = getExcessLuggageCostByPassenger(p.getPassportNumber());
                        for (int i = 0; i < p.getNumLuggage(); i++) {
                            if (i < 1) {
                                LuggageSlip currentFirst = new LuggageSlip(p, f);
                                slips.add(currentFirst);
                            } else {
                                LuggageSlip currentRest = new LuggageSlip(p, f, label);
                                slips.add(currentRest);
                            }
                        }
                    s = "Piece Added: (" + p.getNumLuggage() + "). Excess Cost:$" + label;

                        if (p.getNumLuggage() == 0) {
                            s = "No luggage to add.";
                        }
                    
                } 
                else {
                        s = "Invalid Flight";
                }
            return s;
        }

        public String getExcessLuggageCostByPassenger(String passportNumber) {
            int luggage = 0;
            LuggageSlip passenger = null;
            String money = "No Cost";
            double cost = 0.0;
    
                for (LuggageSlip slip : slips) {
                    if (slip.getOwner().getPassportNumber().equals(passportNumber)) {
                        passenger = slip;
                        luggage++;
                    }
                }
    
                if (passenger != null) {
                    int numAllowedPieces = passenger.getOwner().getCabinClass();
                        if (luggage > numAllowedPieces) {
                            cost = getExcessLuggageCost(luggage, numAllowedPieces);
                            money = "$" + cost;
                        }
                    
                }
    
            return money;
        }

        public double getExcessLuggageCost(int numberPieces, int numAllowedPieces) {
            int sum;
            sum = numberPieces - numAllowedPieces;
            sum = sum * 35;
            return sum;
        }

        public String toString() {
            String result = "\nLUGGAGE MANIFEST:\n";
                for (LuggageSlip slip : this.slips) {
                    result += slip.toString() + "\n";
                }
            return result;
        }
        
}

public class LuggageSlip{
    //declarations
    private Passenger owner;
    private static int luggageSlipIDCounter;
    private String luggageSlipID;
    private String label;
    
    //constructor
        public LuggageSlip(Passenger p, Flight f){
            this.owner=p;
            this.luggageSlipIDCounter=1;
            this.luggageSlipID=f.getFlightNo() +"_"+this.owner.getLastName()+"_"+luggageSlipIDCounter;
        }
        
        public LuggageSlip(Passenger p, Flight f, String label){
            this.owner=p;
            luggageSlipIDCounter++;
            this.luggageSlipID=f.getFlightNo() +"_"+this.owner.getLastName()+"_"+luggageSlipIDCounter;
            this.label=label;
        }
    
    //accessors
        public Passenger getOwner(){
            return this.owner;
        }
        
        public int getLuggageSlipIDCounter(){
            return luggageSlipIDCounter;
        }
        
        public String getLuggageSlipID(){
            return this.luggageSlipID;
        }
        
        public String getLabel(){
            return this.label;
        }
        
    //method
        public boolean hasOwner(String passportNumber){
            if(this.owner.getPassportNumber().equals(passportNumber)){
                return true;
            }
            else{
                return false;
            }
        }
    
        public String toString(){
            return this.getLuggageSlipID()+" "+this.getOwner().toString()+" $"+this.getLabel();
        }
}

import java.util.Random;
public class Passenger{
    //Declarations
    private String passportNumber;
    private String flightNo;
    private String firstName;
    private String lastName;
    private int numLuggage;
    private char cabinClass;
    private Random rand;
    
    //constructor
        public Passenger(String passportNumber,String firstName, String lastName,String flightNo){
        this.passportNumber=passportNumber;
        this.firstName=firstName;
        this.lastName=lastName;
        this.flightNo=flightNo;
        assignRandomCabinClass();
        }
    
    //accessors
        public String getPassportNumber(){
        return this.passportNumber;
        }
    
        public String getFirstName(){
        return this.firstName;
        }
        
        public String getLastName(){
        return this.lastName;
        }
        
        public String getFlightNo(){
        return this.flightNo;
        }
        
        public int getNumLuggage(){
        return this.numLuggage;
        }
        
        public char getCabinClass(){
        return this.cabinClass;
        }
        
    //methods
        public void assignRandomCabinClass(){
            char cabin[]={'F','B','P','E'};
            int luggage[]={3,2,1,0};
            int rc=new Random().nextInt(cabin.length);
            int rl=new Random().nextInt(luggage.length);
            this.cabinClass=cabin[rc];
            this.numLuggage=luggage[rl];
        }
        
        public String toString(){
            return "PP NO. "+this.getPassportNumber()+" NAME: "+this.getFirstName().charAt(0) + "." + this.getLastName().toUpperCase() 
                        + " NUMLUGGAGE: " +this.getNumLuggage()+" "+ " CLASS: " +this.getCabinClass();
        }
        
}

